from operator import itemgetter


class Emp:
    """Дом"""
    def __init__(self, id, naz, ccol, dep_id):
        self.id = id
        self.naz = naz
        self.ccol = ccol
        self.dep_id = dep_id


class Dep:
    """Улица"""
    def __init__(self, id, name):
        self.id = id
        self.name = name


# Улицы
deps = [
    Dep(1, 'Бауманская'),
    Dep(2, 'Госпитальный перулок'),
    Dep(3, 'Лефортовская'),
    Dep(4, 'Каспийская'),
    Dep(5, 'Маршала Чуйкова'),
    Dep(6, 'Габдуллы Тукая'),
]


# Дома
emps = [
    Emp(1, 'д.33', 2, 1),
    Emp(2, 'д.2 стр.1', 3, 2),
    Emp(3, 'д.55', 4, 3),
    Emp(4, 'д.78 стр.1', 5, 6),
    Emp(5, 'д.12', 1, 3),
    Emp(6, 'д.18', 2, 5),
    Emp(7, 'д.5', 4, 4),
    Emp(8, 'д.34',10,6),
]


def main():
    """Основная функция"""


    # Соединение данных один-ко-многим 
    one_to_many = [(e.naz, e.ccol, d.name) 
        for d in deps 
        for e in emps 
        if e.dep_id==d.id]
    
    print('Задание 1')
    res_11 = sorted(one_to_many, key=itemgetter(2))
    print(res_11)
    
    print('\nЗадание 2')
    res_12_unsorted = []
    # Перебираем все улицы
    for d in deps:
        # Список домов на улице
        d_emps = list(filter(lambda i: i[2]==d.name, one_to_many))
        # Если дом есть на улице        
        if len(d_emps) > 0:
            # Количество домов на улице
            d_ccols = [ccol for _,ccol,_ in d_emps]
            # Суммарное количество домов на улице
            d_ccols_sum = sum(d_ccols)
            res_12_unsorted.append((d.name, d_ccols_sum))


    # Сортировка по суммарной количестве домов на улице
    res_12 = sorted(res_12_unsorted, key=itemgetter(1), reverse=True)
    print(res_12)


if __name__ == '__main__':
    main()






